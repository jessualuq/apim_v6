# Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

wso2:
  # WSO2 Subscription parameters (https://wso2.com/subscription/)
  # If provided, these parameters will be used to obtain official WSO2 product Docker images available at WSO2 Private Docker Registry (https://docker.wso2.com/)
  # for this deployment
  subscription:
    username: licencias.ius@juntadeandalucia.es
    password: nkwZemnsq7NhK6i

  # WSO2 Choreo Analytics Parameters
  # If provided, these parameters will be used publish analytics data to Choreo Analytics environment (https://apim.docs.wso2.com/en/latest/observe/api-manager-analytics/configure-analytics/register-for-analytics/).
  choreoAnalytics:
    enabled: false
    endpoint: ""
    onpremKey: ""

  deployment:
    dependencies:
      # The configuration should be set to be 'true' if a MySQL database should be spawned as a pod within the cluster
      cluster_mysql: false
      # Enable NFS dynamic provisioner for Kubernetes
      nfsServerProvisioner: false

    # Persisted and shared runtime artifacts for API Manager
    # See official documentation (from https://apim.docs.wso2.com/en/latest/install-and-setup/setup/reference/common-runtime-and-configuration-artifacts/#persistent-runtime-artifacts)
    persistentRuntimeArtifacts:
      # Kubernetes Storage Class to be used to dynamically provision the relevant Persistent Volumes
      # Only persistent storage solutions supporting ReadWriteMany access mode are applicable (https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes)
      # Defaults to Kubernetes Storage Class generated using the NFS Server Provisioner (https://github.com/helm/charts/tree/master/stable/nfs-server-provisioner)
      storageClass: &storage_class "nfs"

      # Persistent runtime artifacts for Apache Solr-based indexing
      apacheSolrIndexing:
        # Indicates if persistence of the runtime artifacts for Apache Solr-based indexing is enabled
        # By default, this is disabled
        enabled: false
        # Define capacities for persistent runtime artifact directories
        capacity:
          # For persisting the H2 based local Carbon database file
          carbonDatabase: 50M
          # For persisting the indexed data
          solrIndexedData: 50M

    am:
      # Container image configurations
      # If a custom image must be used, uncomment 'dockerRegistry' and provide its value
      dockerRegistry: "docker.wso2.com"
      imageName: "wso2am"
      imageTag: "4.3.0.12"
      # Refer to the Kubernetes documentation on updating images (https://kubernetes.io/docs/concepts/containers/images/#updating-images)
      imagePullPolicy: Always

      resources:
        # These are the resource recommendations for running WSO2 API Management product profiles with profile optimization
        # Resource configurations defined here are applicable for all API Manager product profiles of this deployment
        requests:
          memory: "1Gi"
          cpu: "1000m"
        limits:
          memory: "2Gi"
          cpu: "2000m"
        # JVM settings
        # These are the resource allocation configurations associated with the JVM
        # Refer to the official documentation for advanced details (https://apim.docs.wso2.com/en/latest/install-and-setup/install/installation-prerequisites/)
        jvm:
          # Resource allocation for the Java Heap
          heap:
            memory:
              # Initial and minimum Heap size
              xms: "512m"
              # Maximum Heap size
              xmx: "512m"

      # Kubernetes Probes
      # Startup probe executed prior to Liveness Probe taking over
      startupProbe:
        # Number of seconds after the container has started before startup probes are initiated
        initialDelaySeconds: 45
        # How often (in seconds) to perform the probe
        periodSeconds: 5
        # Number of attempts
        failureThreshold: 8
      # Indicates whether the container is running
      livenessProbe:
        # How often (in seconds) to perform the probe
        periodSeconds: 10
        # Indicates whether the container is ready to service requests
      readinessProbe:
        # Number of seconds after the container has started before readiness probes are initiated
        initialDelaySeconds: 50
        # How often (in seconds) to perform the probe
        periodSeconds: 10

      # API Manager's WebSub specific configurations
      websub:
        # Configure Ingress
        
        hostname: "websub-des.justicia.junta-andalucia.es"

      # API Manager's WebSocket specific configurations
      websocket:
        # Configure Ingress
     
        hostname: "websocket-des.justicia.junta-andalucia.es"
        
      # API Manager's Gateway specific configurations
      gateway:
        # Configure Ingress
  
        hostname: "api-gw-des.justicia.junta-andalucia.es"
          # Annotations for the API Manager Gateway service Ingress
          

        # Number of deployment replicas
        replicas: 2

        # Kubernetes RollingUpdate strategy configurations
        strategy:
          rollingUpdate:
            # The maximum number of pods that can be scheduled above the desired number of pods
            maxSurge: 2
            # The maximum number of pods that can be unavailable during the update
            maxUnavailable: 0

        # If the deployment configurations for the Gateway profile of WSO2 API Manager v3.2.0 (<WSO2AM>/repository/conf/deployment.toml),
        # add the customized configuration file under (wso2 -> deployment -> am -> gateway -> config -> deployment.toml)
        # config:
        #   deployment.toml: |-
        #     # deployment configurations for the Gateway profile of WSO2 API Manager v3.2.0 (<WSO2AM>/repository/conf/deployment.toml)

      # API Manager's Control Plane specific configurations
      cp:
        db:
          hostname: iusslbddesa04.justicia.junta-andalucia.es
          port: 1521
          type: oracle
          driver: oracle.jdbc.driver.OracleDriver
          driver_url: https://download.oracle.com/otn-pub/otn_software/jdbc/234/ojdbc11.jar
          apim:
            username: WSO2AM_CONFIGMG
            password: WSO2AM_CONFIGMG
            url: jdbc:oracle:thin:@//iusslbddesa04.justicia.junta-andalucia.es:1521/pdbdesa04.justicia.junta-andalucia.es
          apim_shared:
            username: WSO2AM_CONFIGMG
            password: WSO2AM_CONFIGMG
            url: jdbc:oracle:thin:@//iusslbddesa04.justicia.junta-andalucia.es:1521/pdbdesa04.justicia.junta-andalucia.es
        # Kubernetes Probes
        # Startup probe executed prior to Liveness Probe taking over
        startupProbe:
          # Number of seconds after the container has started before startup probes are initiated
          initialDelaySeconds: 60
          # How often (in seconds) to perform the probe
          periodSeconds: 5
          # Number of attempts
          failureThreshold: 8
        # Indicates whether the container is running
        livenessProbe:
          # How often (in seconds) to perform the probe
          periodSeconds: 10
          # Indicates whether the container is ready to service requests
        readinessProbe:
          # Number of seconds after the container has started before readiness probes are initiated
          initialDelaySeconds: 80
          # How often (in seconds) to perform the probe
          periodSeconds: 10

        # Configure Ingress
      
        hostname: "wso2am-des.justicia.junta-andalucia.es"
          # Annotations for the API Manager Control Plane service Ingress
     
        # Number of deployment replicas
        replicas: 2

        resources:
          # These are the minimum resource recommendations for running WSO2 API Management Control Plane deployment
          # as per official documentation (https://apim.docs.wso2.com/en/latest/install-and-setup/install/installation-prerequisites/)
          requests:
            memory: "2Gi"
            cpu: "2000m"
          limits:
            memory: "3Gi"
            cpu: "3000m"
          # JVM settings
          # These are the resource allocation configurations associated with the JVM
          # Refer to the official documentation for advanced details (https://apim.docs.wso2.com/en/latest/install-and-setup/install/installation-prerequisites/)
          jvm:
            # Resource allocation for the Java Heap
            heap:
              memory:
                # Initial and minimum Heap size
                xms: "1024m"
                # Maximum Heap size
                xmx: "1024m"

        # config:
        #   deployment.toml: |-
        #     # deployment configurations for the Control Plane profile of WSO2 API Manager v4.0.0 (<WSO2AM>/repository/conf/deployment.toml)

    mi:
      # If a custom image must be used, uncomment 'dockerRegistry' and provide its value.
      dockerRegistry: "docker.wso2.com"
      imageName: "wso2mi"
      imageTag: "4.2.0.93"
      # Number of deployment replicas
      replicas: 1
      strategy:
        rollingUpdate:
          # The maximum number of pods that can be scheduled above the desired number of pods.
          maxSurge: 1
          # The maximum number of pods that can be unavailable during the update.
          maxUnavailable: 0
      # Kubernetes Probes
      # Startup probe executed prior to Liveness Probe taking over
      startupProbe:
        # Number of seconds after the container has started before startup probes are initiated
        initialDelaySeconds: 10
        # How often (in seconds) to perform the probe
        periodSeconds: 5
        # Number of attempts
        failureThreshold: 8
      # Indicates whether the container is running.
      livenessProbe:
        # How often (in seconds) to perform the probe.
        periodSeconds: 10
      # Indicates whether the container is ready to service requests.
      readinessProbe:
        # Number of seconds after the container has started before readiness probes are initiated.
        initialDelaySeconds: 35
        # How often (in seconds) to perform the probe.
        periodSeconds: 10
      # These are the minimum resource recommendations for running WSO2 Micro Integrator
      resources:
        requests:
          # The minimum amount of memory that should be allocated for a Pod
          memory: "512Mi"
          # The minimum amount of CPU that should be allocated for a Pod
          cpu: "500m"
        limits:
          # The maximum amount of memory that should be allocated for a Pod
          memory: "1Gi"
          # The maximum amount of CPU that should be allocated for a Pod
          cpu: "1000m"
      # Environment variables for the Micro integrator deployment.
      envs:
      #  ENV_NAME: ENV_VALUE

      # Add the customized deployment configurations for the WSO2 MI v4.2.0 (<WSO2MI>/conf/deployment.toml)
      config:
         deployment.toml: |-
          [server]
          hostname = "wso2am-pattern-3-mi-1-service-internal"wso2am-pattern-3-am-cp-service-internal
          http_port = 8290
          https_port = 8253
          # offset  = 10

          [user_store]
          type = "read_only_ldap"
          
          [transport.http.listener]
          parameter.port = "8280"
          
          [transport.https.listener]
          parameter.HttpsProtocols = "TLSv1.2,TLSv1.3"
          parameter.port = "8253"

          [keystore.primary]
          file_name = "repository/resources/security/wso2carbon.jks"
          password = "wso2carbon"
          alias = "wso2carbon"
          key_password = "wso2carbon"

          [truststore]
          file_name = "repository/resources/security/client-truststore.jks"
          password = "wso2carbon"
          alias = "symmetric.key.value"
          algorithm = "AES"				

          [mediation]
          synapse.enable_xpath_dom_failover=true

          ## Following are set of example configs. Please refer docs for complete set of configurations.

          # [transport.http]
          # socket_timeout = 180000   # timeout in milliseconds
          # disable_connection_keepalive = false
          # connection_timeout = 90000 # in milliseconds

          # [[datasource]]
          # id = "WSO2CarbonDB"  # "WSO2_COORDINATION_DB"
          # url = "jdbc:mysql://localhost:3306/integratordb"
          # username = "root"
          # password = "root"
          # driver = "com.mysql.jdbc.Driver"

          [[datasource]]
          id = "WSO2_COORDINATION_DB"
          url= "jdbc:oracle:thin:@iusslbddesa04.justicia.junta-andalucia.es:1521/pdbdesa04.justicia.junta-andalucia.es"
          username="WSO2MI_CONFIGMG"
          password="WSO2MI_CONFIGMG"
          driver="oracle.jdbc.OracleDriver"
          pool_options.maxActive=50
          pool_options.maxWait = 60000
          pool_options.testOnBorrow = true

          [[datasource]]
          id = "WSO2CarbonDB"
          url= "jdbc:oracle:thin:@iusslbddesa04.justicia.junta-andalucia.es:1521/pdbdesa04.justicia.junta-andalucia.es"
          username="WSO2MI_CONFIGMG"
          password="WSO2MI_CONFIGMG"
          driver="oracle.jdbc.OracleDriver"
          pool_options.maxActive=50
          pool_options.maxWait = 60000
          pool_options.testOnBorrow = true




          [super_admin]
          password = "admin"
          [management_api]
          protocols = "https"				
                  
          [readiness_probe]
          protocols = "http https"
          
          [[service_catalog]]
          apim_host = "https://wso2am-pattern-3-am-cp-service-internal:9443"
          enable = true
          username = "admin"
          password = "admin"
          
          [message_builders]
          application_xml = "org.apache.axis2.builder.ApplicationXMLBuilder"
          form_urlencoded = "org.apache.synapse.commons.builders.XFormURLEncodedBuilder"
          #multipart_form_data = "org.wso2.carbon.relay.BinaryRelayBuilder"
          multipart_form_data = "org.apache.axis2.builder.MultipartFormDataBuilder"
          text_plain = "org.apache.axis2.format.PlainTextBuilder"
          application_json = "org.wso2.micro.integrator.core.json.JsonStreamBuilder"
          json_badgerfish = "org.apache.axis2.json.JSONBadgerfishOMBuilder"
          text_javascript = "org.apache.axis2.json.JSONBuilder"
          octet_stream = "org.wso2.carbon.relay.BinaryRelayBuilder"
          application_binary = "org.apache.axis2.format.BinaryBuilder"

          [message_formatters]
          form_urlencoded = "org.apache.synapse.commons.formatters.XFormURLEncodedFormatter"
          #multipart_form_data = "org.wso2.carbon.relay.ExpandingMessageFormatter"
          multipart_form_data = "org.apache.axis2.transport.http.MultipartFormDataFormatter"
          application_xml = "org.apache.axis2.transport.http.ApplicationXMLFormatter"
          text_xml = "org.apache.axis2.transport.http.SOAPMessageFormatter"
          soap_xml = "org.apache.axis2.transport.http.SOAPMessageFormatter"
          text_plain = "org.apache.axis2.format.PlainTextFormatter"
          application_json = "org.wso2.micro.integrator.core.json.JsonStreamFormatter"
          json_badgerfish = "org.apache.axis2.json.JSONBadgerfishMessageFormatter"
          text_javascript = "org.apache.axis2.json.JSONMessageFormatter"
          octet_stream = "org.wso2.carbon.relay.ExpandingMessageFormatter"
          application_binary = "org.apache.axis2.format.BinaryFormatter"

          [[custom_message_builders]]
          content_type = "text/html"
          class = "org.wso2.carbon.relay.BinaryRelayBuilder"

          [[custom_message_formatters]]
          content_type = "text/html"
          class = "org.wso2.carbon.relay.ExpandingMessageFormatter"
   
          [mediation]
          flow.statistics.capture_all= true
          synapse.enable_xpath_dom_failover="true"
          stat.tracer.collect_payloads= true
          stat.tracer.collect_mediation_properties= true

   

      # Configure synapse testing.
      synapseTest:
        enabled: false

      # Configure Ingresses
   
      hostname: "mgt-des.justicia.junta-andalucia.es"
       
kubernetes:
  # Name of Kubernetes service account
  serviceAccount: "wso2am-pattern-3-svc-account"

